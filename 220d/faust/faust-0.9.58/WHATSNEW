
							================
							| FAUST 0.9.58 |
							================

GRAME - Centre National de Creation Musicale - is happy to announce
the release of FAUST 0.9.54. This new release provides support to
develop iPad/iPhone audio applications, LV2 effects and synth plugins,
an improved organization and namy additions and enhancements to the
libraries and examples. It also adds HTTP remote control possibilities
to several existing architectures.


-------------
About FAUST :
-------------

FAUST (Functional Audio Stream) is a functional programming language
specifically designed for real-time signal processing and synthesis. A
distinctive characteristic of FAUST is to be fully compiled. The FAUST compiler
translates DSP specifications into very efficient C++ code that works at sample
level. It targets high-performance signal processing applications, libraries and
audio plug-ins for a variety of audio platforms and standards. A same FAUST
specification can be used to easily generate native JACK or ALSA applications,
as well as CSOUND, LADSPA, MAX/MSP, PD, Q, SC and VST plugins.  

The Faust distribution can be downloaded at:
http://sourceforge.net/projects/faudiostream

The GIT repository can be cloned with the following command :
git clone git://git.code.sf.net/p/faudiostream/code faust

To compile faust :
make httpd (only if you have GNU libmicrohttpd installed)
make
sudo make install


Two mailing lists are available:
https://lists.sourceforge.net/lists/listinfo/faudiostream-devel
https://lists.sourceforge.net/lists/listinfo/faudiostream-users

In order to test FAUST without installing it, please refer to the
Online Faust Compiler : 
http://faust.grame.fr


======================== WHAT'S NEW ==============================

------------
HTTP       :
------------
A new -httpd option can be used to embbed a small web server to any Faust 
application. This web server, based on GNU libmicrohttpd, allows to 
remotely control the faust application using any HTML5 capable web browser.  

The -httpd option can be used with the following scripts : faust2alqt, 
faust2alsa, faust2caqt, faust2jack, faust2jackconsole, faust2jaqt, 
faust2netjackqt. By default the resulting application will listen on 
TCP port 5510. On the same machine the application can be controlled by 
opening http://localhost:5510  


------------
LV2        :
------------
LV2 is a new open-source audio and MIDI plugin standard for Linux
and other Unix-like systems, successor of the LADSPA standard. The aim
of this architecture is to provide an LV2 implementation which
supports both audio (pure signal processing) and instrument (MIDI ->
audio) plugins. Two scripts are provided faust2lv2 and
faust2lv2plugin. The full faust-lv2 package by Albert Gr√§f (U. of Mainz) is
available here : http://code.google.com/p/faust-lv2/


------------
iPad iPhone:
------------
This release introduces a new architecture 'ios-coreaudio.cpp' with
the related scripts and makefiles to develop iOS5 iPad and iPhone
audio applications. Use 'make ios' in the example folder to compile
the examples, or use 'faust2ios harpe.dsp' to compile specific files.
Note that you need Xcode with iOS development tools and a valid
profile to successfully compile.

Once you have an application running on the device you can
individually assign gyroscopes and compass to user interface widgets.
If you keep your finger for 1 second on a slider, a popup window 
appear allowing you to choose the sensor to use and control its
sensibility and direction.


------------
Libraries  :
------------
Revised low/high shelf filters in filter.lib
Reduce start-up transients in examples by moving smooth to output of db2linear
Interpolate sawN delay in oscillator.lib / pulsetrainN
Extend filterbank (in filter.lib) down to two-band case; 
Much revision for oscillator.lib, new virtual analog waveforms, new 
demonstration example. 
The filter.lib, oscillator.lib and effect.lib are contributed by Julius 
Smith (CCRMA/Stanford U.)


-----------------
New organisation:
-----------------
The architecture files are now more modular and the installation tree
has been improved. Assuming Faust is installed with the default prefix
'/usr/local' we now have  :

'/usr/local/lib/faust/' that contains :
- the architecture files (*.cpp),
- faust's libraries (*.lib) and
- specific binary libraries (*.a) for OSC, HTTP, etc.

'/usr/local/include/faust/' that contains all the *.h required by the 
various architecture files, organized in two main subfolders :
- 'gui/' contains all the user interface parts
- 'audio/' contains all the audio driver parts

'/usr/local/bin/' that contains faust itself and the various faust2xxx scripts

All the architecture files that include user interface parts and audio driver parts can
use a partial pathname starting with faust. For example
#include "faust/audio/jack-dsp.h"


----------------
Acknowledgments:
----------------
Many persons have been contributing to the FAUST project by
providing code for the compiler, architecture files, libraries,
examples, documentation, scripts, bug reports, ideas, etc. 

I would like to thank them and especially: Fons Adriaensen, Tim
Blechmann, Tiziano Bole, Baktery Chanka, Thomas Charbonnel, Damien
Cramet, Etienne Gaudrin, Olivier Guillerminet, Albert Graef, Stefan
Kersten, Victor Lazzarini, Matthieu Leberre, Mathieu Leroi, Kjetil
Matheussen, Hermann Meyer, Romain Michon, Remy Muller, Sampo
Savolainen, Nicolas Scaringella, Stephen Sinclair, Travis Skare,
Julius Smith, Michael Wilson, as well as my colleagues at GRAME, in
particular : Dominique Fober, Stephane Letz, Olivier Guillerminet
and Karim Barkati, and from the ASTREE project : Jerome Barthelemy (IRCAM), 
Alain Bonardi (IRCAM), Raffaele Ciavarella (IRCAM), Pierre Jouvelot
(Mines/ParisTech), Laurent Pottier (U. Saint-Etienne)

Yann Orlarey
GRAME

