#!/bin/bash

#####################################################################
#                                                                   #
#        Compiles a Faust program into a csound opcode              #
#               (c) Grame, 2009                                     #
#                                                                   #
#####################################################################


#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# PHASE 1 : Look for -icc option to force use of intel icc (actually icpc)
# without having to configure CXX and CXXFLAGS

PATH=$PATH:/usr/local/bin

if [[ $(uname) == Darwin ]]; then
    LIB="-I/Library/Frameworks/CsoundLib.framework/Headers -I/usr/local/include -framework CsoundLib -L/usr/local/lib -dynamiclib"
else
    LIB="-I/usr/include/csound -shared -fPIC"
fi


for p in $@; do
	if [ "$p" = -icc ]; then
		CXX=icpc
		CXXFLAGS='-O3 -xT -ftz -fno-alias -fp-model fast=2'
    fi
done

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-arch32" ]; then
	PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
	PROCARCH="-m64"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -e "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done


#-------------------------------------------------------------------
# compile the *.dsp files
#
for SRC in $FILES; do
	opname=`basename ${SRC%.dsp}`
    faust  -uim -double -a csound.cpp $OPTIONS "$SRC" -o "$SRC.cpp"
    ${CXX=g++} ${CXXFLAGS=-O3} $OMP $LIB -DOPCODE_NAME=$opname "$SRC.cpp" -o "${SRC%.dsp}.dylib"
    rm "$SRC.cpp"
    BINARIES="$BINARIES${SRC%.dsp}.dylib;"
done

# return the binaries names
echo "$BINARIES"
